<?xml version="1.0" ?><OrchExportInfo><Time>Wed Oct 05 18:24:30 UTC 2016</Time><User>blahicks</User><Comments>Ansible Tower Example</Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data>{"checksum":"490ca7b75a8d9048b591cb87a578e4ddbd0f5398","data":""}</data></featureAssetEntry><type>WORKFLOWS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"get_VM_Network_Details","taskLabel":"get_VM_Network_Details","isActive":true,"taskSummary":"Get VM info for VIX Customization","taskDescription":"Get VM info regarding VM Hostname, IP Address, Subnet Mask, and Gateway.\n","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 1 inputs\r\n   vmId (Label: \'vmId\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 10 outputs\r\n   vmMemory (Description: \'vm memory in MB\', Type: gen_text_input)\r\n   vmCPU (Description: \'VM CPU Count\', Type: gen_text_input)\r\n   vmDisksCount (Description: \'VM Disks Count\', Type: gen_text_input)\r\n   vmDiskSize (Description: \'VM Total Disk Size\', Type: gen_text_input)\r\n   vmOS (Description: \'VM OS Type\', Type: gen_text_input)\r\n   vmAnnotation (Description: \'VM Annotation\', Type: gen_text_input)\r\n   vmMac (Description: \'VM MAC Address\', Type: gen_text_input)\r\n   vmPath (Description: \'VM Path in vCenter\', Type: gen_text_input)\r\n   vmHostname (Description: \'New VM Hostname\', Type: gen_text_input)\r\n   vmIPAddress (Description: \'New VM IP Address\', Type: gen_text_input)\r\n\r\n","taskData":"eyJuYW1lIjoiZ2V0X1ZNX05ldHdvcmtfRGV0YWlscyIsImxhYmVsIjoiZ2V0X1ZNX05ldHdvcmtfRGV0YWlscyIsInJlZ2lzdGVyVW5kZXJUcmVlIjoiVk0tRGV0YWlscyIsImlzQWN0aXZlIjp0cnVlLCJzdW1tYXJ5IjoiR2V0IFZNIGluZm8gZm9yIFZJWCBDdXN0b21pemF0aW9uIiwiZGVzY3JpcHRpb24iOiJHZXQgVk0gaW5mbyByZWdhcmRpbmcgVk0gSG9zdG5hbWUsIElQIEFkZHJlc3MsIFN1Ym5ldCBNYXNrLCBhbmQgR2F0ZXdheS5cbiIsInVjc2RGcm9tVmVyc2lvbiI6IjUuMy4yLjAiLCJjb25maWciOnsibmFtZSI6IklucHV0Q29uZmlnIiwiZmllbGRzIjp7Imxpc3QiOlt7Im5hbWUiOiJ2bUlkIiwibGFiZWwiOiJ2bUlkIiwicGVyc2lzdCI6dHJ1ZSwiY29sdW1uSW5mbyI6bnVsbCwidHlwZSI6InRleHQiLCJtYXBUb1R5cGUiOiJnZW5fdGV4dF9pbnB1dCIsIm1hbmRhdG9yeSI6dHJ1ZSwicmJpZCI6IiIsInNpemUiOiJtZWRpdW0iLCJoZWxwIjoiIiwiYW5ub3RhdGlvbiI6IiIsImdyb3VwIjoiIiwidmFsaWRhdGUiOmZhbHNlLCJmb3JtTWFuYWdlZFRhYmxlIjpmYWxzZSwiYWRkRW50cnlGb3JtIjoiIiwiZWRpdEVudHJ5Rm9ybSI6IiIsImRlbGV0ZUVudHJ5Rm9ybSI6IiIsIm1vdmVVcEZvcm0iOiIiLCJtb3ZlRG93bkZvcm0iOiIiLCJpbmZvRW50cnlGb3JtIjoiIiwicnVuQWN0aW9uRm9ybSI6IiIsImVkaXRhYmUiOnRydWUsImhpZGRlbiI6ZmFsc2UsIm11bHRpbGluZSI6ZmFsc2UsIm1heExlbmd0aCI6MTI4LCJsb3YiOiIiLCJsb3ZQcm92aWRlciI6IiIsIm9yZGVyIjo5OTk5OSwidXBsb2FkRGlyIjoiIiwidGFibGUiOiIiLCJ2YWxpZGF0b3IiOiIiLCJyZWdleCI6Ii4qIiwicmVnZXhMYWJlbCI6Ii4qIiwibWluVmFsdWUiOi05MjIzMzcyMDM2ODU0Nzc1ODA4LCJtYXhWYWx1ZSI6OTIyMzM3MjAzNjg1NDc3NTgwNywiaGlkZUZpZWxkTmFtZSI6IiIsImhpZGVGaWVsZFZhbHVlIjoiIiwiaGlkZUZpZWxkQ29uZGl0aW9uIjoiRVEiLCJodG1sUG9wdXBUYWciOiIiLCJodG1sUG9wdXBMYWJlbCI6IiIsImh0bWxQb3B1cFN0eWxlIjowLCJodG1sUG9wdXBUZXh0IjoiIiwidmlldyI6IiIsInZhbHVlcyI6W119XSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyLm1kdWkuTURVSUZpZWxkRGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSUZpZWxkTGlzdFZhbGlkYXRvciJ9fSwib3V0cHV0cyI6eyJsaXN0IjpbeyJuYW1lIjoidm1NZW1vcnkiLCJkZXNjcmlwdGlvbiI6InZtIG1lbW9yeSBpbiBNQiIsInR5cGUiOiJnZW5fdGV4dF9pbnB1dCJ9LHsibmFtZSI6InZtQ1BVIiwiZGVzY3JpcHRpb24iOiJWTSBDUFUgQ291bnQiLCJ0eXBlIjoiZ2VuX3RleHRfaW5wdXQifSx7Im5hbWUiOiJ2bURpc2tzQ291bnQiLCJkZXNjcmlwdGlvbiI6IlZNIERpc2tzIENvdW50IiwidHlwZSI6Imdlbl90ZXh0X2lucHV0In0seyJuYW1lIjoidm1EaXNrU2l6ZSIsImRlc2NyaXB0aW9uIjoiVk0gVG90YWwgRGlzayBTaXplIiwidHlwZSI6Imdlbl90ZXh0X2lucHV0In0seyJuYW1lIjoidm1PUyIsImRlc2NyaXB0aW9uIjoiVk0gT1MgVHlwZSIsInR5cGUiOiJnZW5fdGV4dF9pbnB1dCJ9LHsibmFtZSI6InZtQW5ub3RhdGlvbiIsImRlc2NyaXB0aW9uIjoiVk0gQW5ub3RhdGlvbiIsInR5cGUiOiJnZW5fdGV4dF9pbnB1dCJ9LHsibmFtZSI6InZtTWFjIiwiZGVzY3JpcHRpb24iOiJWTSBNQUMgQWRkcmVzcyIsInR5cGUiOiJnZW5fdGV4dF9pbnB1dCJ9LHsibmFtZSI6InZtUGF0aCIsImRlc2NyaXB0aW9uIjoiVk0gUGF0aCBpbiB2Q2VudGVyIiwidHlwZSI6Imdlbl90ZXh0X2lucHV0In0seyJuYW1lIjoidm1Ib3N0bmFtZSIsImRlc2NyaXB0aW9uIjoiTmV3IFZNIEhvc3RuYW1lIiwidHlwZSI6Imdlbl90ZXh0X2lucHV0In0seyJuYW1lIjoidm1JUEFkZHJlc3MiLCJkZXNjcmlwdGlvbiI6Ik5ldyBWTSBJUCBBZGRyZXNzIiwidHlwZSI6Imdlbl90ZXh0X2lucHV0In1dLCJtb1R5cGVOYW1lIjoiY29tLmNsb3VwaWEuc2VydmljZS5jSU0uaW5mcmFtZ3IubWR1aS5NRFVJV29ya2Zsb3dUYXNrT3V0cHV0RGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSU91dHB1dExpc3RWYWxpZGF0b3IifSwiZXhlY3V0aW9uTGFuZyI6IkphdmFzY3JpcHQiLCJleGVjdXRpb25TY3JpcHQiOiJpbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNJTSk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyKTtcblxudmFyIHZ2bSA9IEluZnJhUGVyc2lzdGVuY2VVdGlsLmdldFZNV2FyZVZNU3VtbWFyeShcIlwiK2lucHV0LnZtSWQpO1xuXG4vL1JBTVxudmFyIG1lbSA9IHZ2bS5nZXRNZW1vcnlNQigpO1xubG9nZ2VyLmFkZEluZm8oXCJWTSBNZW1vcnkgc2l6ZSBmb3IgdGhlIFZNIFwiK2lucHV0LnZtSWQrXCIgaXMgOiBcIittZW0pO1xub3V0cHV0LnZtTWVtb3J5ID0gbWVtO1xuXG4vL0NQVVxudmFyIGNwdSA9IHZ2bS5nZXROdW1DUFVzKCk7XG5sb2dnZXIuYWRkSW5mbyhcIlZNIENQVSBjb3VudCBmb3IgdGhlIFZNIFwiK2lucHV0LnZtSWQrXCIgaXMgOiBcIitjcHUpO1xub3V0cHV0LnZtQ1BVID0gY3B1O1xuXG4vL0Rpc2tzIENvdW50XG52YXIgZGlza2NvdW50ID0gdnZtLmdldFZtRGlza0NvdW50KCk7XG5sb2dnZXIuYWRkSW5mbyhcIlRvdGFsIG5vLiBvZiBkaXNrcyBmb3IgdGhlIFZNIFwiK2lucHV0LnZtSWQrXCIgaXMgOiBcIitkaXNrY291bnQpO1xub3V0cHV0LnZtRGlza3NDb3VudCA9IGRpc2tjb3VudDtcblxuLy9EaXNrIFNpemVcbnZhciBkaXNrc2l6ZSA9IHZ2bS5nZXRVbnNoYXJlZERpc2tHQigpO1xubG9nZ2VyLmFkZEluZm8oXCJUb3RhbCB1bnNoYXJlZCBkaXNrIHNwYWNlIGZvciB0aGUgVk0gXCIraW5wdXQudm1JZCtcIiBpcyA6IFwiK2Rpc2tzaXplKTtcbm91dHB1dC52bURpc2tTaXplID0gZGlza3NpemU7XG5cbi8vVk0gT1NcbnZhciB2bW9zID0gdnZtLmdldEd1ZXN0T1MoKTtcbmxvZ2dlci5hZGRJbmZvKFwiVGhlIG9wZXJhdGluZyBzeXN0ZW0gZm9yIHRoZSBWTSBcIitpbnB1dC52bUlkK1wiIGlzIDogXCIrdm1vcyk7XG5vdXRwdXQudm1PUyA9IHZtb3M7XG5cbi8vVk0gQW5ub3RhdGlvblxudmFyIHZtYW5ub3RhdGlvbiA9IHZ2bS5nZXRHdWVzdE9TKCk7XG5sb2dnZXIuYWRkSW5mbyhcIlRoZSBhbm5vdGF0aW9uIGZvciB0aGUgVk0gXCIraW5wdXQudm1JZCtcIiBpcyA6IFwiK3ZtYW5ub3RhdGlvbik7XG5vdXRwdXQudm1Bbm5vdGF0aW9uID0gdm1hbm5vdGF0aW9uO1xuXG4vL1ZNIFBhdGhcbnZhciB2bXBhdGggPSB2dm0uZ2V0Vm1QYXRoKCk7XG5sb2dnZXIuYWRkSW5mbyhcIlRoZSBwYXRoIGZvciB0aGUgVk0gXCIraW5wdXQudm1JZCtcIiBpcyA6IFwiK3ZtcGF0aCk7XG5vdXRwdXQudm1QYXRoID0gdm1wYXRoO1xuXG4vL1ZNIE1BQyBBZGRyZXNzXG52YXIgdm1tYWMgPSB2dm0uZ2V0Vm1NYWNBZGRyKCk7XG5sb2dnZXIuYWRkSW5mbyhcIlRoZSBNQUMgQWRkcmVzcyBmb3IgdGhlIFZNIFwiK2lucHV0LnZtSWQrXCIgaXMgOiBcIit2bW1hYyk7XG5vdXRwdXQudm1NYWMgPSB2bW1hYztcblxuLy9WTSBIb3N0bmFtZVxudmFyIHZtaG9zdG5hbWUgPSB2dm0uZ2V0R3Vlc3RIb3N0bmFtZSgpO1xubG9nZ2VyLmFkZEluZm8oXCJUaGUgR3Vlc3QgSG9zdG5hbWUgZm9yIHRoZSBWTVwiK2lucHV0LnZtSWQrXCIgaXMgOiBcIit2bWhvc3RuYW1lKTtcbm91dHB1dC52bUhvc3RuYW1lID0gdm1ob3N0bmFtZTtcblxuLy9WTSBJUCBBZGRyZXNzXG52YXIgdm1pcGFkZHIgPSB2dm0uZ2V0R3Vlc3RJUEFkZHJlc3MoKTtcbmxvZ2dlci5hZGRJbmZvKFwiVGhlIGd1ZXN0IElQIEFkZHJlc3MgZm9yIHRoZSBWTVwiK2lucHV0LnZtSWQrXCIgaXMgOiBcIit2bWlwYWRkcik7XG5vdXRwdXQudm1JUEFkZHJlc3MgPSB2bWlwYWRkcjsiLCJjb250cm9sbGVySW1wbCI6eyJsaXN0IjpbXSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLmxpYi5jTWFjcm9VSS5NYWNyb0NvbnRyb2xsZXJTY3JpcHQiLCJ2YWxpZGF0b3JOYW1lIjpudWxsfX0="}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"AnsibleTowerRegisterHost","taskLabel":"Add host to Ansible Tower Inventory","isActive":true,"taskSummary":"REST API call to Ansible Tower to register a new host into an existing inventory.\n\n/api/v1/hosts/\n","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 7 inputs\r\n   AnsibleTowerServer (Label: \'Ansible Tower Server IP/Hostname\', Type: text, MappableType: gen_text_input)\r\n   AnsibleTowerTransport (Label: \'Transport (HTTP/HTTPS) for Ansible Tower\', Type: text, MappableType: gen_text_input)\r\n   AnsibleTowerAccount (Label: \'Ansible Tower Account ID\', Type: embedded-lov, MappableType: gen_text_input)\r\n   Hostname (Label: \'Hostname of new system\', Type: text, MappableType: gen_text_input)\r\n   NewVMIP (Label: \'IP address of new system\', Type: text, MappableType: gen_text_input)\r\n   NewVMDescription (Label: \'Description of new system\', Type: text, MappableType: gen_text_input)\r\n   AnsibleTowerInventory (Label: \'Specify Inventory to add new system\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 0 outputs\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"AnsibleTowerRunJob","taskLabel":"Run a specified Ansible Tower Job","isActive":true,"taskSummary":"REST API call to Ansible Tower to run a defined job.\n\n/api/v1/job_templates/${job_id}/launch/\n","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 4 inputs\r\n   AnsibleTowerServer (Label: \'Ansible Tower Server IP/Hostname\', Type: text, MappableType: gen_text_input)\r\n   AnsibleTowerTransport (Label: \'Transport (HTTP/HTTPS) for Ansible Tower\', Type: text, MappableType: gen_text_input)\r\n   AnsibleTowerAccount (Label: \'Ansible Tower Account ID\', Type: embedded-lov, MappableType: gen_text_input)\r\n   AnsibleTowerJobTemplate (Label: \'Specify Job Template to Run\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 0 outputs\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>